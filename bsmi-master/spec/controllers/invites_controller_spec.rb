require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe InvitesController do

  # This should return the minimal set of attributes required to create a valid
  # Invite. As you add validations to Invite, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:email => 'myemail', :invite_code => 'whatevercodeishere', :first_name => 'firstname', :last_name => 'lastname', :owner_type => 'myowner'}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InvitesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before (:each) do
    controller.stub!(:require_admin).and_return(true)
  end

  describe "send_invitation" do
    it "invite the user, and send email to that email address" do
      invite = Invite.create! valid_attributes
      get :send_invitation, {:id => invite.id}, valid_session
      assigns(:invite).should eq(invite)
    end
  end

  describe "GET index" do
    it "assigns all invites as @invites" do
      invite = Invite.create! valid_attributes
      get :index, {}, valid_session
      assigns(:invites).should eq([invite])
    end
  end

  describe "GET new" do
    it "assigns a new invite as @invite" do
      get :new, {}, valid_session
      assigns(:invite).should be_a_new(Invite)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Invite" do
        expect {
          post :create, {:invite => valid_attributes}, valid_session
        }.to change(Invite, :count).by(1)
      end

      it "assigns a newly created invite as @invite" do
        post :create, {:invite => valid_attributes}, valid_session
        assigns(:invite).should be_a(Invite)
        assigns(:invite).should be_persisted
      end

      it "redirects to the index" do
        post :create, {:invite => valid_attributes}, valid_session
        response.should redirect_to(:action => :index)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved invite as @invite" do
        # Trigger the behavior that occurs when invalid params are submitted
        Invite.any_instance.stub(:save).and_return(false)
        post :create, {:invite => {}}, valid_session
        assigns(:invite).should be_a_new(Invite)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Invite.any_instance.stub(:save).and_return(false)
        post :create, {:invite => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

end
